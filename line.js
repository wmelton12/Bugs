// Generated by CoffeeScript 1.6.3
(function() {
  var Line;

  Line = (function() {
    function Line(x1, y1, x2, y2, draw, drawLine) {
      this.x1 = x1;
      this.y1 = y1;
      this.x2 = x2;
      this.y2 = y2;
      this.draw = draw;
      this.drawLine = drawLine != null ? drawLine : true;
      if (this.drawLine) {
        this.draw.line(this.x1, this.y1, this.x2, this.y2).stroke({
          width: 1,
          color: 'red'
        });
      }
      this.vertical = false;
      if (this.x1 === this.x2) {
        this.vertical = true;
      }
      this.m = null;
      this.d = null;
      if (!this.vertical) {
        this.m = (this.y2 - this.y1) / (this.x2 - this.x1);
        this.d = this.y1 - this.m * this.x1;
      }
    }

    Line.prototype["eval"] = function(x) {
      var flag;
      flag = null;
      if (this.vertical) {
        flag = null;
      } else {
        flag = this.m * x + this.d;
      }
      return flag;
    };

    Line.prototype.intersection = function(other) {
      var x, y;
      if (this.vertical) {
        return other["eval"](this.x1);
      } else if (this.m === other.m && this.d === other.d) {
        return true;
      } else if (this.m === other.m && this.d !== other.d) {
        return false;
      } else {
        x = (other.d - this.d) / (this.m - other.m);
        y = this.m * x + this.d;
      }
      return [x, y];
    };

    Line.prototype.passesThroughLine = function(other) {
      var flag, p, x, y;
      if (!this.vertical) {
        p = this.intersection(other);
        if (p === true) {
          return true;
        }
        if (p === false) {
          return false;
        }
        x = p[0];
        y = p[1];
        flag = (((this.x1 < x && x < this.x2)) || ((this.x2 < x && x < this.y2))) && (((other.x1 < x && x < other.x2)) || ((other.x2 < x && x < other.x1)));
      } else {
        p = this.intersection(other);
        x = p[0];
        y = p[1];
        flag = (((this.y1 < y && y < this.y2)) || ((this.y2 < y && y < this.y1))) && (((other.x1 < x && x < other.x2)) || ((other.x2 < x && x < other.x1)));
      }
      return flag;
    };

    return Line;

  })();

  this.Line = Line;

}).call(this);
